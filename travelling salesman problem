#include <iostream>
#include <vector>
#include <algorithm>
#include <limits>

const int INF = std::numeric_limits<int>::max();

int tsp(const std::vector<std::vector<int>>& graph, std::vector<int>& path, std::vector<bool>& visited, int current, int n, int count, int cost, int& minCost) {
    if (count == n && graph[current][0] != 0) {
        minCost = std::min(minCost, cost + graph[current][0]);
        return minCost;
    }

    for (int i = 0; i < n; ++i) {
        if (!visited[i] && graph[current][i] != 0) {
            visited[i] = true;
            path[count] = i;

            tsp(graph, path, visited, i, n, count + 1, cost + graph[current][i], minCost);

            visited[i] = false;
            path[count] = -1;
        }
    }

    return minCost;
}

int solveTSP(const std::vector<std::vector<int>>& graph) {
    int n = graph.size();
    std::vector<bool> visited(n, false);
    std::vector<int> path(n, -1);

    visited[0] = true;
    path[0] = 0;

    int minCost = INF;
    tsp(graph, path, visited, 0, n, 1, 0, minCost);

    return minCost;
}

int main() {
    int n;
    std::cin >> n;

    std::vector<std::vector<int>> graph(n, std::vector<int>(n));

    for (int i = 0; i < n; ++i) {
        int v, w;
        std::cin >> v >> w;
        graph[i][0] = v;
        graph[i][1] = w;
    }

    int minCost = solveTSP(graph);

    std::cout << minCost << " 0" << std::endl;

    std::vector<int> path(n + 1);
    path[0] = 0;
    for (int i = 1; i <= n; ++i) {
        path[i] = i - 1;
    }

    for (int i = 0; i <= n; ++i) {
        std::cout << path[i] << " ";
    }
    std::cout << std::endl;

    return 0;
}
