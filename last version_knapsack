#include <iostream>
#include <vector>
#include <algorithm>

struct Item {
    int value;
    int weight;
};

int knapsack(int capacity, const std::vector<Item>& items) {
    int n = items.size();
    std::vector<std::vector<int>> dp(n + 1, std::vector<int>(capacity + 1, 0));

    for (int i = 1; i <= n; i++) {
        for (int w = 1; w <= capacity; w++) {
            if (items[i - 1].weight <= w) {
                dp[i][w] = std::max(dp[i - 1][w], dp[i - 1][w - items[i - 1].weight] + items[i - 1].value);
            } else {
                dp[i][w] = dp[i - 1][w];
            }
        }
    }

    return dp[n][capacity];
}

int main() {
    int capacity = 11;
    std::vector<Item> items = {
        {8, 4},
        {10, 5},
        {15, 8},
        {4, 3}
    };

    int max_value = knapsack(capacity, items);

    std::cout << "Maximum value: " << max_value << std::endl;

    return 0;
}
