#include <iostream>
#include <vector>
#include <algorithm>

struct Item {
    int weight;
    int value;
};

struct Result {
    int optimalValue;
    std::vector<int> selectedItems;
};

Result knapsack(int capacity, const std::vector<Item>& items) {
    int n = items.size();
    std::vector<std::vector<int>> dp(n + 1, std::vector<int>(capacity + 1, 0));

    for (int i = 1; i <= n; i++) {
        for (int w = 1; w <= capacity; w++) {
            if (items[i - 1].weight <= w) {
                dp[i][w] = std::max(dp[i - 1][w], dp[i - 1][w - items[i - 1].weight] + items[i - 1].value);
            } else {
                dp[i][w] = dp[i - 1][w];
            }
        }
    }

    int optimalValue = dp[n][capacity];
    std::vector<int> selectedItems;

    int w = capacity;
    for (int i = n; i > 0 && optimalValue > 0; i--) {
        if (optimalValue != dp[i - 1][w]) {
            selectedItems.push_back(i - 1);
            optimalValue -= items[i - 1].value;
            w -= items[i - 1].weight;
        }
    }

    std::reverse(selectedItems.begin(), selectedItems.end());

    return { optimalValue, selectedItems };
}

int main() {
    int n, capacity;
    std::cin >> n >> capacity;

    std::vector<Item> items;
    for (int i = 0; i < n; i++) {
        int value, weight;
        std::cin >> value >> weight;
        items.push_back({ weight, value });
    }

    Result result = knapsack(capacity, items);

    std::cout << result.optimalValue << std::endl;
    for (int i = 0; i < result.selectedItems.size(); i++) {
        std::cout << result.selectedItems[i] << " ";
    }
    std::cout << std::endl;

    return 0;
}
